{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","payload","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setTodolistsAC","todolists","setDisableStatus","disabled","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","catch","err","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","entityStatus","removeTodolist","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","resultCode","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","rootReducer","combineReducers","todoListId","copyState","forEach","m","app","store","configureStore","reducer","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","name","handleChange","handleBlur","touched","getFieldProps","FormControlLabel","control","isValid","dirty","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1253345.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ef43bd75-8438-40b6-8849-600e54b7eb04'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(payload: AuthPayloadType) {\r\n        return instance.post<AuthPayloadType, AxiosResponse<ResponseType<{userId: number}>>>(`/auth/login`, payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId: number}>>(`/auth/login`)\r\n    },\r\n    me () {\r\n        return instance.get<ResponseType>(`/auth/me`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type AuthPayloadType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    disabled: boolean\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setAppErrorAC('Some error occurred'))\r\n  }\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n  dispatch(setAppErrorAC(error.message))\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<any>","import { Dispatch } from 'redux'\r\nimport {AppActionsType, SetAppErrorACType, setAppStatusAC, SetAppStatusACType} from '../../app/app-reducer'\r\nimport {authAPI, AuthPayloadType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setTodolistsAC, SetTodolistsActionType} from \"../TodolistsList/todolists-reducer\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return {...state, isLoggedIn: action.value}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n// actions\r\nexport type SetIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: AuthPayloadType) => (dispatch: Dispatch<AppActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<AuthActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setTodolistsAC([]))\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\nexport type AuthActionsType = SetIsLoggedInACType | SetAppStatusACType | SetAppErrorACType\r\n| SetTodolistsActionType\r\n","import {Dispatch} from \"redux\";\r\nimport {AuthActionsType, setIsLoggedInAC} from \"../features/login/authReducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as string | null,\r\n  isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n    case \"APP/SET-ERROR\":\r\n      return {...state, ...action.payload}\r\n    case \"APP/SET-INITIALIZED\":\r\n      return {...state, isInitialized: action.isInitialized}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport type AppActionsType = SetAppStatusACType | SetAppErrorACType | SetIsInitializedActionType | AuthActionsType\r\n\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitialized>\r\nexport const setIsInitialized = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n  return {\r\n    type: \"APP/SET-STATUS\",\r\n    payload: {status}\r\n  } as const\r\n}\r\n\r\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\r\nexport const setAppErrorAC = (error: null | string) => {\r\n  return {\r\n    type: \"APP/SET-ERROR\",\r\n    payload: {error}\r\n  } as const\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me()\r\n    .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(setIsLoggedInAC(true));\r\n        }\r\n      }\r\n    ).finally(()=>{\r\n    dispatch(setIsInitialized(true))\r\n  })\r\n\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n  AppActionsType,\r\n  RequestStatusType,\r\n  setAppErrorAC,\r\n  setAppStatusAC,\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.id)\r\n    case 'ADD-TODOLIST':\r\n      return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n    case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n      return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n  type: 'CHANGE-TODOLIST-TITLE',\r\n  id,\r\n  title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  id,\r\n  filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType)=>({\r\n  type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n  id,\r\n  entityStatus\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n        dispatch(setTodolistsAC(res.data))\r\n      })\r\n  }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(setAppStatusAC(\"succeeded\"))\r\n          dispatch(removeTodolistAC(todolistId))\r\n        } else {\r\n          dispatch(setAppStatusAC(\"failed\"))\r\n          dispatch(setAppErrorAC(res.data.messages[0]))\r\n        }\r\n      })\r\n  }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTodolist(title)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(addTodolistAC(res.data.data.item))\r\n          dispatch(setAppStatusAC(\"succeeded\"))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n        }\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(err, dispatch)\r\n      })\r\n  }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n      .then((res) => {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n      })\r\n  }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n  | RemoveTodolistActionType\r\n  | AddTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\n  | SetTodolistsActionType\r\n  | AppActionsType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {AppActionsType,  setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n    case 'ADD-TASK':\r\n      return {...state, [action.task.todoListId]: [{...action.task, disabled: false}, ...state[action.task.todoListId]]}\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId]\r\n          .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n      }\r\n    case 'ADD-TODOLIST':\r\n      return {...state, [action.todolist.id]: []}\r\n    case 'REMOVE-TODOLIST':\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    case 'SET-TODOLISTS': {\r\n      const copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case 'SET-TASKS':\r\n      return {...state, [action.todolistId]: action.tasks.map(m=> ({...m, disabled: false}))}\r\n    case \"SET-DISABLE-STATUS\":\r\n      return {...state, [action.todolistId]: state[action.todolistId]\r\n          .map(m => m.id === action.taskId ? {...m, disabled: action.disabled} : m)}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n  ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n  ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n  ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const setDisableStatus = (taskId: string, todolistId: string, status: boolean) =>\r\n  ({type: 'SET-DISABLE-STATUS', taskId, todolistId, disabled: status} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC(\"loading\"))\r\n  todolistsAPI.getTasks(todolistId)\r\n    .then((res) => {\r\n      const tasks = res.data.items\r\n      dispatch(setAppStatusAC(\"succeeded\"))\r\n      const action = setTasksAC(tasks, todolistId)\r\n      dispatch(action)\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC(\"loading\"))\r\n  dispatch(setDisableStatus(taskId, todolistId, true))\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n        const action = removeTaskAC(taskId, todolistId)\r\n        dispatch(action)\r\n      }else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC(\"loading\"))\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item\r\n        const action = addTaskAC(task)\r\n        dispatch(action)\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(setDisableStatus(taskId, todolistId, true))\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        const action = updateTaskAC(taskId, domainModel, todolistId)\r\n        dispatch(action)\r\n        dispatch(setDisableStatus(taskId, todolistId, false))\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(err, dispatch)\r\n      })\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof setDisableStatus>\r\n  | AppActionsType\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus\r\n            disabled={props.disabled}\r\n            onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {task, todolistId} = props\r\n    const onClickHandler = useCallback(() => props.removeTask(task.id, todolistId), [task.id, todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [task.id, todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.disabled}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} disabled={props.task.disabled}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.task.disabled}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.entityStatus === \"loading\"}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            const thunk = fetchTodolistsTC()\r\n            dispatch(thunk)\r\n        }\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn){\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n  const dispatch = useDispatch()\r\n  const error = useAppSelector<null | string>(state => state.app.error)\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { useNavigate} from \"react-router-dom\";\r\nimport {AuthPayloadType} from \"../../api/todolists-api\";\r\n\r\n// type FormikErrorType = {\r\n//   email?: string\r\n//   password?: string\r\n//   rememberMe?: boolean\r\n// }\r\n\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch()\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: (values) => {\r\n      const errors: Partial<Omit<AuthPayloadType, 'captcha'>> = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length < 3) {\r\n        errors.password = 'Min length is 3 characters'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n      //formik.resetForm()\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n   //return <Navigate to={'/'}/>\r\n    navigate('/')\r\n  }\r\n\r\n  return <Grid container justifyContent={'center'}>\r\n    <Grid item justifyContent={'center'}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'} rel=\"noreferrer\"> here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              name=\"email\"\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.email}\r\n            />\r\n            {formik.touched.email\r\n            && formik.errors.email\r\n            && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps(\"password\")}\r\n            />\r\n            {formik.touched.password\r\n            && formik.errors.password\r\n            && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox\r\n                name=\"rememberMe\"\r\n                onChange={formik.handleChange}\r\n                checked={formik.values.rememberMe}\r\n              />}\r\n            />\r\n            <Button\r\n              type={'submit'}\r\n              variant={'contained'}\r\n              color={'primary'}\r\n              disabled={!formik.isValid || !formik.dirty}\r\n            >\r\n              Login\r\n            </Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {AppRootStateType, useAppSelector} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/login/Login\";\r\nimport {logoutTC} from \"../features/login/authReducer\";\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const status = useAppSelector<RequestStatusType>(state => state.app.status)\r\n  const isInitialized = useAppSelector<boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n  useEffect(()=> {\r\n    dispatch(initializeAppTC())\r\n  }, [])\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logoutTC())\r\n  }\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {(status === 'loading') && <LinearProgress color=\"secondary\"/>}\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path='/' element={<TodolistsList />}/>\r\n          <Route path='login' element={<Login/>}/>\r\n          <Route path='404' element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n          <Route path='*' element={<Navigate to=\"404\"/>}/>\r\n        </Routes>\r\n      </Container>\r\n      <ErrorSnackbar/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n          <HashRouter>\n            <App/>\n          </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}